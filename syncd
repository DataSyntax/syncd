#!/bin/bash
#------------------------------------------------------------
# initd script for running services without start-stop-daemon
# (c) Wolfgang Ziegler, nuppla@zites.net, drunomics GmbH
#------------------------------------------------------------
# edited by Ross Ivantsiv to support OSX+fswatch (Darwin)
# (c) DataSyntax PE, ross [at] datasyntax.ua

# Find config file

CONF_FILE=syncd.conf

while [ ! -e $CONF_FILE ]; do
  if [ $PWD = "/" ]; then
    echo "Unable to find syncd configuration file \"$CONF_FILE\"."
    exit 1
  else
    cd ..
  fi
done

if [ `uname` == "Linux" ];then
    SCRIPT=`readlink -f $0`
    LINK=`readlink -f $0`
    SCRIPT_DIR=`dirname $LINK`
elif [ `uname` == "Darwin" ];then
    TARGET_FILE=$0
    while [ -L $TARGET_FILE ]
    do
        TARGET_FILE=`readlink $TARGET_FILE`
    done
    SCRIPT_DIR=`dirname $TARGET_FILE`
fi

DAEMON_NAME=syncd

. $CONF_FILE

case $1 in
    start)
      if [ -e ${PIDFILE} ] && ( ps -p `cat $PIDFILE` > /dev/null ); then
        echo "$DAEMON_NAME is already running."
        exit 1;
      fi
      export WATCHCOMMAND
      export WATCH_VERBOSE
      export LOGFILE
      $SCRIPT_DIR/watch.sh $SYNCCOMMAND &
      echo "$!" > $PIDFILE
      echo "Starting $DAEMON_NAME..."
    ;;

    stop)
      if [ ! -e ${PIDFILE} ] || ( ! ps -p `cat $PIDFILE` > /dev/null ); then
        echo "$DAEMON_NAME is not running."
        exit 1;
      fi

      echo "Stopping $DAEMON_NAME..."
      PID=`cat $PIDFILE`
      CHILD_PIDS=$(pgrep -P $PID);
      kill $PID 2> /dev/null || echo Killing process failed, not running?
      # Wait half a second and Kill child PIDs to be sure they are gone.
      sleep 0.5
      kill $CHILD_PIDS 2> /dev/null
      rm $PIDFILE
    ;;
    restart)
      $SCRIPT stop
      $SCRIPT start
    ;;

    status)
      if [ -e ${PIDFILE} ] && ( ps -p `cat $PIDFILE` > /dev/null ); then
          echo "$DAEMON_NAME is running."
      else
          echo "$DAEMON_NAME is not running."
      fi
    ;;

    run)
        $SYNCCOMMAND && echo Done.
    ;;

    log)
      tail -f $LOGFILE
    ;;

    *)
      echo "Usage: $0 {start|stop|restart|status|run|log}"
      exit 3
    ;;
esac
